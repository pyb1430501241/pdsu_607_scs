<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="com.pdsu.scs">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:property-placeholder location="classpath:properties/db.properties"/>
	<!-- 配置dataSource -->
	<bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${db.user}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="jdbcUrl" value="${db.url}"></property>
		<property name="driverClass" value="${db.driver}"></property>
	</bean>
	<!-- MyBatis 和 Spring 整合 -->
	<bean id = "sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定 MyBatis 全局配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
		<!-- 指定 Mapper 文件的位置 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
	</bean>
	<!-- 配置扫描器, 将所有 Mybatis 接口添加到 IOC 容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描 Dao 接口, 把所有接口添加进 IOC 容器 -->
		<property name="basePackage" value="com.pdsu.scs.dao"></property>
	</bean>
	<!-- 配制一个可以批量插入的 SqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- 配置 Spring 配置式事务 -->
	<bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id = "txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有该切点切入的方法均为事务方法 -->
			<tx:method name="*"/>
			<!-- select 开头的所有方法被认为是只读方法 -->
			<tx:method name="select*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 事务表达式 -->
		<aop:pointcut expression="execution(* com.pdsu.scs.service..*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!-- 配置 shiro -->
	<!-- 配置 cacheManager -->
	<bean id = "cacheManager" class= "org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro/ehcache.xml"></property>
	</bean>
	
	<!-- 配置 SecurityManager -->
	<bean id  = "securityManager" class = "org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 多 realm -->
		<property name="authenticator" ref="authenticator"></property>
	<!-- 	<property name="realms">
			<list>
				<ref bean="jdbcRealm"/>
			</list>
		</property> -->
		<property name="realm" ref="jdbcRealm"></property>
	</bean>
	
	<!-- 配置认证器 -->
	<bean id = "authenticator" class = "org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class = "org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
		</property>
	</bean>
	<!-- 
		配置 realm
			目前方法为直接配置实现了 Realm 接口的 bean
	 -->
	<bean id = "jdbcRealm" class = "com.pdsu.scs.shiro.LoginRealm">
		<property name="credentialsMatcher">
			<bean class = "org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 指定加密算法 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 指定加密次数 -->
				<property name="hashIterations" value="2"></property>
			</bean>
		</property>
	</bean>
	<!-- 
		配置 LifecycleBeanPostProcessor, 可以自动的调用配置在 Spring IOC 容器中的 shiro bean 的生命周期方法
	  -->
	<bean id = "lifecycleBeanPostProcessor" class = "org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<!-- 
		启用 IOC 容器中的 shiro 的注解, 但必须在配置了 LifecycleBeanPostProcessor 之后才可使用
	 -->
	 <bean class = "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	 	depends-on="lifecycleBeanPostProcessor"></bean>
	 <bean class = "org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	 	<property name="securityManager" ref="securityManager"></property>
	 </bean>
	 
	 <bean id = "shiroFilter" class = "org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	  	<property name="securityManager" ref="securityManager"></property>
	  	<property name="loginUrl" value="/WEB-INF/jsp/login.jsp"></property>
	  	<property name="successUrl" value="/WEB-INF/jsp/blob/index.jsp"></property>
	  </bean>
</beans>